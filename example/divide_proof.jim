(def divide (fn (x y)
	(precond (and
		(number? x)
		(number? y)
		(> x 0)
		(> y 0))
	(postcond (and
		(= x (+ r (* y q)))
		(< r y))

	(def r x)
	(def q 0)

	; +id is the additive identity axiom.
	; (def +id (axiom (pre (number? v)) (= v (+ v 0))))
	(+id r)
	; 1. +id r-maps to the axiom.
	; 2. Apply axiom on r-map of r, yields (= r (+ r 0)).
	; 3. The r-form of the whole if is v-mapped True since add0 is axiom.
	; 4. (= r (+ r 0)) v-mapped True.
	; 5. Whenever an equality form is v-mapped True, as in this case,
	;   the equal values are merged together.

	(obtain (= r (+ r 0)))
	; "obtain" is the re-iteration rule; it simply states something already shown.
	; More accurately, it computes the rv-map of the form
	; and the result is required to be True.

	(obtain (= x (+ r 0)))
	; Trivial because x, r, and (+ r 0) all rv-map to the same value.

	(*0 y)
	; *0 is the axiom for (= 0 (* v 0))
	(obtain (= x (+ r (* y q))))
	; Because (= q 0), both (* y q) and (* y 0) r-maps to the same r-value,
	; which in turn v-map to 0 thanks to mult0. So the form reduces to (+ r 0).

	; [def div-prop (= x (+ r (* y q)))]
	; def in [] context associates a truth with a name.
	; These names do not participate in normal name lookup.

	;[show-proof-state before-while]

	(loop (r q)
		(invar (= x (+ r (* y q)))
		(post (not (<= y r))
		((by-cases (and (not (<= y r)) (= x (+ r (* q y)))))
			; Prove the post-conditions by cases.
			(if (<= y r)
				(progn
					; Proof obligation: (= x (+ (- r y) (* y (+ q 1))))
					(+id r)
					(subt0 y)
					(obtain (= x (+ (+ r (- y y)) (* y q))))
					(sum-neg (- y y))
					(obtain (= x (+ (+ r (+ y (- y))) (* y q))))
					(+flatten (+ r (+ y (- y))))
					(+flatten (+ (+ r y (- y)) (* y q)))
					(obtain (= x (+ r y (- y) (* y q))))
					(+comm (+ r y (- y) (* y q)) 2 3)
					(+flatten (+ (+ r (- y)) y (* y q)))
					(obtain (= x (+ (+ r (- y)) y (* y q))))
					(sum-neg (- r y))
					(obtain (= x (+ (- r y) y (* y q))))
					(*id y)
					(obtain (= x (+ (- r y) (* y 1) (* y q))))
					(+assoc (+ (- r y) (+ (* y 1) (* y q))))
					(obtain (= x (+ (- r y) (+ (* y 1) (* y q)))))
					(*distr (* y (+ 1 q)))
					(obtain (= x (+ (- r y) (* y (+ 1 q)))))
					; The recur refers to the loop,
					; so it similarly commits new v-maps for r and q.
					; However, these do not correspond to (- r y) and (+ q 1) since
					; the recur itself may have gone through more recur.
					(*recur* (- r y) (+ q 1)))))
		(and-elim (and (not (<= y r)) (= x (+ r (* q y))))))))

	(obtain (not (<= y r)))  ; by the loop post-condition
	(obtain (= x (+ r (* q y))))  ; by the loop invariant

	(list q r)))))
