; INPUT
(assign x 7)
(assign y 2)
(assert (and (> x 0) (> y 0)))

[=intr (= x x)]
(assign r x)
[assign (= x r)]  [mark lr]

[[sub [add0 (= r (+ r 0))] lr] (= x (+ r 0))]  [mark lr]

[[sub [mult0 (= 0 (* 0 y))] lr] (= x (+ r (* 0 y)))]  [mark lr]

[=intr (= 0 0)]
(assign q 0)
[assign (= 0 q)]
[[sub (= 0 q) lr] (= x (+ r (* q y)))]  [mark invar]


(while (<= y r)
	[assume (= x (+ r (* q y)))]  [mark invar]
	[show_proof_state begin-while]

	[[sub [add0 (= r (+ r 0))] invar] (= x (+ (+ r 0) (* q y)))]  [mark invar]
	[[sub [subt0 (= 0 (- y y))] invar]
			(= x (+ (+ r (- y y)) (* q y)))]  [mark invar]
	[[sub [-+ (= (- y y) (+ y (- y)))] invar]
		(= x (+ (+ r (+ y (- y))) (* q y)))]  [mark invar]
	[+assoc (= (+ (+ r (+ y (- y))) (* q y)) (+ r y (- y) (* q y)))]  [mark lr]
	[[sub lr invar] (= x (+ r y (- y) (* q y)))]  [mark invar]

	[+comm (= (+ r y (- y) (* q y)) (+ r (- y) y (* q y)))]  [mark lr]
	[[sub lr invar] (= x (+ r (- y) y (* q y)))]  [mark invar]

	[+assoc (= (+ r (- y) y (* q y)) (+ (+ r (- y)) y (* q y)))]  [mark lr]
	[[sub lr invar] (= x (+ (+ r (- y)) y (* q y)))]  [mark invar]

	[-+ (= (- r y) (+ r (- y)))]
	[=flip (= (+ r (- y)) (- r y))]  [mark lr]
	[[sub lr invar] (= x (+ (- r y) y (* q y)))]  [mark invar]

	[show_proof_state update-r]

	(assign r (- r y))
	[assign (= x (+ r y (* q y)))]  [mark crit]

	[[sub [mult1 (= y (* y 1))] crit]
			(= x (+ r (* y 1) (* q y)))]  [mark crit]
	[[sub [*comm (= (* q y) (* y q))] crit]
			(= x (+ r (* y 1) (* y q)))]  [mark crit]

	[+assoc (= (+ r (* y 1) (* y q)) (+ r (+ (* y 1) (* y q))))]  [mark lr]
	[[sub lr crit] (= x (+ r (+ (* y 1) (* y q))))]  [mark crit]

	[*distr (= (* y (+ 1 q)) (+ (* y 1) (* y q)))]
	[=flip (= (+ (* y 1) (* y q)) (* y (+ 1 q)))]  [mark lr]
	[[sub lr crit] (= x (+ r (* y (+ 1 q))))]  [mark crit]

	[[sub [+comm (= (+ 1 q) (+ q 1))] crit]
			(= x (+ r (* y (+ q 1))))] [mark crit]

	[show_proof_state update-q]

	(assign q (+ q 1))
	[assign (= x (+ r (* y q)))]  [mark invar]
	[[sub [*comm (= (* y q) (* q y))] invar]
			(= x (+ r (* q y)))]  ; we have loop invariant again
	[show_proof_state end-while])

[show_proof_state before-while]

[while (and (not (<= y r)) (= x (+ r (* q y))))]

; OUTPUT
(print q)
(print r)
