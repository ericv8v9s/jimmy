; INPUT
(assign x 7)
(assign y 2)
(assert (not (= y 0)))
[assert (not (= y 0))]  ; nothing is ever auto-inferred
; assert in brackets refers to the rule of assertion

[=intr (= x x)]
(assign r x)
[assign (= x r)]  ; rule of assignment; substitute r for x gives (= x x)
[mark xr1]  ; marks last result as "xr1"

; TODO arithmetic inference rules
[0+ (= r (+ r 0))]  ; rule of additive identity
[mark xr2]
; substitute xr2 (which must be of form (= a b)) into xr1: r -> (+ r 0)
[(sub xr2 xr1) (= x (+ r 0))]
[mark xr3]

[0* (= 0 (* y 0))]  ; rule of multiply by zero
[mark y0]
[(sub y0 xr3) (= x (+ r (* y 0)))]
[mark xr4]

[=intr (= 0 0)]
(assign q 0)
[assign (= 0 q)]
; every formula involving q not explicitly shown is invalidated
[(sub (= 0 q) xr4) (= x (+ r (* y q)))]  [mark invar]  ; loop invariant

(while (<= y r)  ;  [assume (<= y r)]  ; not used; required by form
	; begins sub-proof
	; TODO find a way to derive this
	[(= x (+ (- r y) y (* y q)))]

	(assign r (- r y))
	[assign (= x (+ r y (* y q)))]  [mark crit-b1]
	[+assoc (= (+ r y (* y q)) (+ r (+ y (* y q))))]  [mark crit-b2]
	[*distr (= (+ y (* y q)) (* y (+ q 1)))]  [mark crit-b3]
	[(sub crit-b2 crit-b1) (= x (+ r (+ y (* y q))))]  [mark crit-b4]
	[(sub crit-b3 crit-b4) (= x (+ r (* y (+ q 1))))]
	(assign q (+ q 1))
	; we have loop invariant again [(= x (+ r (* y q)))]
	[assign invar])

; We can examine the set of results known before the form and the form itself
; The previous while form must have a single sub-proof,
; the last formula of which is considered the invariant
; and which must be shown to be true before the while form.
[while (and
	(not (<= y r))  ; negation of loop condition
	; this must be known before the loop and shown to be maintained by the loop
	(= x (+ r (* y q))))]

; OUTPUT
(print q)
(print r)
