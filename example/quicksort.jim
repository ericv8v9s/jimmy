(def list-exchange (fn (A i j)
	(def tmp (get A i))
	(assoc! A i (get A j))
	(assoc! A j tmp)))

(def partition (fn (A p r)
	(def x (get A r))
	(def i (- p 1))
	(def j p)
	(while (<= j (- r 1))
		(cond
			((<= (get A j) x)
				(def i (+ i 1))
				(list-exchange A i j)))
		(def j (+ j 1)))
	(list-exchange A (+ i 1) r)
	(+ i 1)))

(def quicksort (fn (A p r)
	(cond
		((< p r)
			(def q (partition A p r))
			(recur A p (- q 1))
			(recur A (+ q 1) r)))))


(def l (list 9 8 3 4 7 0 2 1 6 5))
(print "UNSORTED")
(print l)
(quicksort l 0 (- (count l) 1))
(print "SORTED")
(print l)
